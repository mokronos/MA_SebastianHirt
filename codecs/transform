#!/usr/bin/env bash
# This scipt is used to
# 1. transform images to RAW format
# 2. generate config files for all images
# 3. transform raw images with codecs
# 4. decode back to original format

# encoding goes down in time with increasing q


convert_to_raw() {

    mkdir -p "$raw_dir"

    convert "$1" -interlace plane rgb:$raw_dir/$(basename "$1" "$ext").raw

    echo "converted $1 to raw"
}


generate_config() {

    fbname=$(basename "$1" "$ext")

    mkdir -p "$config_dir"

    filenameraw=$raw_dir"/"$fbname".raw"
    config=$config_dir"/"$fbname".cfg"
    width=$(identify -format '%w' "$1")
    height=$(identify -format '%h' "$1")

    echo "#======== File I/O ===============" > "$config"
    echo "InputFile                     : $filenameraw" >> "$config"
    echo "InputBitDepth                 : 8           # Input bitdepth" >> "$config"
    echo "InputChromaFormat             : 444         # Ratio of luminance to chrominance samples" >> "$config"
    echo "FrameRate                     : 60          # Frame Rate per second" >> "$config"
    echo "FrameSkip                     : 0           # Number of frames to be skipped in input" >> "$config"
    echo "SourceWidth                   : $width      # Input  frame width" >> "$config"
    echo "SourceHeight                  : $height     # Input  frame height" >> "$config"
    echo "FramesToBeEncoded             : 1           # Number of frames to be coded" >> "$config"
    echo "InputColourSpaceConvert       : RGBtoGBR    # Non-normative colour space conversion to apply to input video" >> "$config"
    echo "SNRInternalColourSpace        : 1           # Evaluate SNRs in GBR order" >> "$config"
    echo "OutputInternalColourSpace     : 0           # Convert recon output back to RGB order. Use --OutputColourSpaceConvert GBRtoRGB on decoder to produce a matching output file." >> "$config"
    echo " " >> "$config"
    echo "Level                         : 6.2" >> "$config"


    echo "generated config file for $1"
}


encode() {

    fbname=$(basename "$1" "$ext")
    q=$2
    codec=$3

    encoded_dir_spec=$encoded_dir"/"$codec
    config=$config_dir"/"$fbname".cfg"
    bitstream=$encoded_dir_spec"/"$fbname"_CTC_"$q".bin"
    reconst=$encoded_dir_spec"/"$fbname"_CTC_dec_"$q".raw"

    mkdir -p "$encoded_dir_spec"

    if [ "$codec" == "hm" ]; then
        if [ "$conf" == "scc" ]; then
            echo "using hm with scc config"
            enc_config=HM/HEVC_SCC_CTC_cfgs/encoder_intra_main_scc_constIBC.cfg
        elif [ "$conf" == "default" ]; then
            echo "using hm with default config"
            enc_config=HM/HEVC_SCC_CTC_cfgs/encoder_intra_main.cfg
        fi
    elif [ "$codec" == "vtm" ]; then
        enc_config=VTM/CTC_cfgs/encoder_intra_vtm.cfg
        class_config=VTM/CTC_cfgs/classSCC.cfg
        format_config=VTM/CTC_cfgs/formatRGB.cfg
    fi

    echo "Encoding $1 with q=$q with codec $codec ..."
    start_time="$(date -u +%s)"
    if [ "$codec" == "hm" ]; then
        ./HM_codec/bin/TAppEncoderStatic -c "$enc_config" -c "$config" -f 1 -q $q --BitstreamFile=$bitstream --ReconFile=$reconst >> HEVC_SCC_CTC_constIBC_log.txt
    elif [ "$codec" == "vtm" ]; then
        if [ "$conf" == "scc" ]; then
            echo "using vtm with scc config"
            ./VTM_codec/bin/EncoderAppStatic -c "$enc_config" -c "$config" -c "$class_config" -c "$format_config" -f 1 -q $q --BitstreamFile=$bitstream --ReconFile=$reconst >> CTC_log.txt
        elif [ "$conf" == "default" ]; then
            echo "using vtm with default config"
            ./VTM_codec/bin/EncoderAppStatic -c "$enc_config" -c "$config" -c "$format_config" -f 1 -q $q --BitstreamFile=$bitstream --ReconFile=$reconst >> CTC_log.txt
        fi
    fi

    end_time="$(date -u +%s)"
    elapsed_time="$(($end_time-$start_time))"

    echo "encoded $1 with q=$q with codec $codec"
    echo "Encoding took $((elapsed_time / 60)) minutes and $((elapsed_time % 60)) seconds to complete."
}

measure_size() {
    # measure size of encoded bitstream and save to result folder for later use

    fbname=$(basename "$1" "$ext")
    q=$2
    codec=$3

    result_dir_spec=$result_dir"/"$codec
    encoded_dir_spec=$encoded_dir"/"$codec
    bitstream=$encoded_dir_spec"/"$fbname"_CTC_"$q".bin"
    textfile=$result_dir_spec"/"$fbname$codec$q".txt"

    mkdir -p "$result_dir_spec"

    size=$(stat -c%s "$bitstream")
    # save size to text file for later use
    echo "size of $fbname with q=$q with codec $codec in bytes:" > "$textfile"
    echo "$size" >> "$textfile"
}

decode() {

    fbname=$(basename "$1" "$ext")
    q=$2
    codec=$3

    decoded_dir_spec=$decoded_dir"/"$codec
    bitstream=$encoded_dir_spec"/"$fbname"_CTC_"$q".bin"
    reconst=$decoded_dir_spec"/"$fbname"_CTC_dec_reco_"$q".raw"

    mkdir -p "$decoded_dir_spec"

    # Decoding
    if [ "$codec" == "hm" ]; then
        ./HM_codec/bin/TAppDecoderStatic -b "$bitstream" -o "$reconst" --OutputColourSpaceConvert=GBRtoRGB --OutputBitDepth=8
    elif [ "$codec" == "vtm" ]; then
        ./VTM_codec/bin/DecoderAppStatic -b "$bitstream" -o "$reconst" --OutputColourSpaceConvert=GBRtoRGB --OutputBitDepth=8
    fi
        

    echo "decoded $1 with q=$q with codec $codec"
}


convert_back() {

    fbname=$(basename "$1" "$ext")
    q=$2
    codec=$3

    result_dir_spec=$result_dir"/"$codec
    decoded_dir_spec=$decoded_dir"/"$codec
    filenameraw=$decoded_dir_spec"/"$fbname"_CTC_dec_reco_"$q".raw"
    filenameoriginal=$result_dir_spec"/"$fbname$codec$q$ext

    mkdir -p "$result_dir_spec"

    # Reconstruction
    width=$(identify -format '%w' $1)
    height=$(identify -format '%h' $1)
    do_back_convertion="convert -size "$width"x"$height" -depth 8 -interlace plane rgb:$filenameraw $filenameoriginal"

    echo $do_back_convertion
    $do_back_convertion

    echo "converted $1 back to $ext with q=$q with codec $codec"
}


pipeline() {
    fname=$(basename "$1" "$ext")
    q=$2
    codec=$3
    echo "Running pipeline for $fname with q=$q with codec $codec"
    convert_to_raw "$filename"
    generate_config "$filename"
    encode "$filename" "$q" "$codec"
    measure_size "$filename" "$q" "$codec"
    decode "$filename" "$q" "$codec"
    convert_back "$filename" "$q" "$codec"
}

# get filenames from args
names=("$@")

ext=".bmp"

conf="scc"
# conf="default"

# define directories
raw_dir="images/"$conf"/raw"
config_dir="images/"$conf"/config"
encoded_dir="images/"$conf"/encoded"
decoded_dir="images/"$conf"/decoded"
result_dir="images/"$conf"/results"

# names=("images/original/SCI01.bmp")

# for filename in "${names[@]}"; do
#    pipeline "$filename" "35" "hm"
# done

# qs=($(seq 35 5 50))
qs=($(seq 22 5 37))

for codec in "vtm" "hm"; do
# for codec in "hm"; do
    for q in "${qs[@]}"; do
        for filename in "${names[@]}"; do
            pipeline "$filename" "$q" "$codec" $"conf"
        done
    done
done
